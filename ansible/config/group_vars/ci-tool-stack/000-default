ci_tool_stack_conf_dir: "{{ env_file_system }}/docker-compose/ci-tool-stack"
ci_tool_stack_docker_compose: "{{ ci_tool_stack_conf_dir }}/docker-compose.yml"
#ci_tool_stack_config_env:
#  - { src: "../files/ansible-env.yaml", dest: "{{ ci_tool_stack_conf_dir }}/ansible-env.yaml" }
ci_tool_stack_systemd_service:
  ci_tool_stack:
    description: 'ci-tool-stack'
    # Start the service on boot
    enabled: Yes
    working_directory: "{{ ci_tool_stack_conf_dir }}"
    after: docker.service
    requires: docker.service
    type: oneshot
    remain_after_exit: 'yes'
    timeoutsec: 120
    environment: "{{ common_environment }}"
    exec_start_pre: "{{ common_exec_start_pre }}"
    exec_start: "{{ common_exec_start }}"
    exec_stop: "{{ common_exec_stop }}"
    exec_reload: "{{ common_exec_reload }}"
    wanted_by: multi-user.target
ci_tool_stack_services:
  version: '3'
  networks:
    prodnetwork:
      driver: bridge
#  TODO: swarm mode
#    driver: overlay
      driver_opts:
        com.docker.network.driver.mtu: 1450
  volumes:
    nexus-data:
    jenkins-data:
  services:
    front:
      image: "ci-tool-stack/nginx:latest"
      build:
        context: https://github.com/pli01/docker-nginx.git
        args:
          - http_proxy=$http_proxy
          - https_proxy=$https_proxy
          - no_proxy=$no_proxy
      restart: always
      depends_on:
        - gitlab
        - jenkins
        - nexus
      ports:
        - "80:80"
      networks:
        prodnetwork:
          aliases:
            - front
    service-config:
      image: "ci-tool-stack/service-config:latest"
      build:
        context: https://github.com/pli01/docker-service-config.git
        args:
          - http_proxy=$http_proxy
          - https_proxy=$https_proxy
          - no_proxy=$no_proxy
    #    restart: always
      depends_on:
        - front
        - gitlab
        - jenkins
        - nexus
      networks:
        prodnetwork:
          aliases:
            - service-config
      entrypoint: /docker-entrypoint.sh service-config
      environment:
        - http_proxy=$http_proxy
        - https_proxy=$https_proxy
        - no_proxy=$no_proxy,nexus
        - nexus_url=http://nexus:8081/nexus
    nexus:
      build:
        context: https://github.com/pli01/docker-sonatype-nexus3.git
        args:
          - http_proxy=$http_proxy
          - https_proxy=$https_proxy
          - no_proxy=$no_proxy
      restart: always
      ports:
        - "18081:8081"
        - "19081:19081"
      networks:
        prodnetwork:
          aliases:
            - nexus
      volumes:
        - nexus-data:/nexus-data
      environment:
        - NEXUS_CONTEXT=nexus
#      - INSTALL4J_ADD_VM_PARAMS="-Xms2g -Xmx2g -XX:MaxDirectMemorySize=3g -Djava.util.prefs.userRoot=${NEXUS_DATA}/javaprefs"
    jenkins:
      build:
        context: https://github.com/pli01/docker-jenkins.git
        args:
          - http_proxy=$http_proxy
          - https_proxy=$https_proxy
          - no_proxy=$no_proxy
      restart: always
      ports:
        - "18080:8080"
      networks:
        prodnetwork:
          aliases:
            - jenkins
      volumes:
        - /var/run/docker.sock:/var/run/docker.sock
        - /usr/bin/docker:/usr/bin/docker
        - jenkins-data:/var/lib/jenkins/
      depends_on:
        - nexus
#      - sonar
      environment:
        - JENKINS_OPTS="--prefix=/jenkins"
        - NEXUS_PORT=8081
        - SONAR_PORT=9000
        - SONAR_DB_PORT=5432
    #  sonardb:
    #    networks:
    #      - prodnetwork
    #    restart: always
    #    image: postgres:9.6
    #    ports:
    #      - "5432:5432"
    #    environment:
    #     - POSTGRES_USER=sonar
    #     - POSTGRES_PASSWORD=sonar
    #  sonar:
    #    image: sonarqube
    #    restart: always
    #    ports:
    #     - "19000:9000"
    #     - "19092:9092"
    #    networks:
    #      - prodnetwork
    #    depends_on:
    #      - sonardb
    #    environment:
    #     - SONARQUBE_JDBC_URL=jdbc:postgresql://sonardb:5432/sonar
    #     - SONARQUBE_JDBC_USERNAME=sonar
    #     - SONARQUBE_JDBC_PASSWORD=sonar

    ##########################################################################################
    # DISABLED: GitLab takes too much memory and CPU. Demo uses GitHub repositories instead.
    #
    gitlab:
      build:
        context: https://github.com/pli01/docker-gitlab-ce.git
      restart: always
      networks:
        prodnetwork:
          aliases:
            - gitlab
    #    environment:
    ##      GITLAB_ROOT_PASSWORD: mypassword
    ##      GITLAB_OMNIBUS_CONFIG: |
    ##        external_url 'http://mysite'
    ##        gitlab_rails['gitlab_email_display_name'] = 'Gitlab'
    ##        gitlab_rails['gitlab_email_from'] = 'noreply@forge.factory'
    ##        gitlab_rails['ldap_allow_username_or_email_login'] = true
    ##        gitlab_rails['ldap_base'] = 'ou=People,dc=org'
    ##        gitlab_rails['ldap_bind_dn'] = 'cn=admin,ou=Meta,dc=org'
    ##        gitlab_rails['ldap_enabled'] = true
    ##        gitlab_rails['ldap_host'] = 'ldaphost'
    ##        gitlab_rails['ldap_method'] = 'plain'
    ##        gitlab_rails['ldap_password'] = 'cloud'
    ##        gitlab_rails['ldap_port'] = '389'
    ##        gitlab_rails['ldap_uid'] = 'uid'
    ##        gitlab_rails['time_zone'] = 'Europe/Paris'
    ##        # deprecated
    ##        gitlab_rails['gravatar_enabled'] = false
    ##        gitlab_rails['gitlab_signup_enabled'] = false
    ##        gitlab_rails['gitlab_signin_enabled'] = false
    ##        # external_url 'https://gitlab.example.com'
    ##        # Add any other gitlab.rb configuration here, each on its own line
      ports:
        - "10080:80"
        - "10443:443"
        - "10022:22"
      volumes:
        - "{{ env_file_system }}/opt/gitlab/config:/etc/gitlab"
        - "{{ env_file_system }}/opt/gitlab/logs:/var/log/gitlab"
        - "{{ env_file_system }}/opt/gitlab/data:/var/opt/gitlab"
